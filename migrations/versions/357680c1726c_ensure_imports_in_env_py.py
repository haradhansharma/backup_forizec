"""ensure imports in env.py

Revision ID: 357680c1726c
Revises: aa034f7f9724
Create Date: 2025-08-23 21:12:36.440565

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '357680c1726c'
down_revision: Union[str, Sequence[str], None] = 'aa034f7f9724'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'services',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_services')),
    )
    op.create_table(
        'users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('email', sa.String(), nullable=False),
        sa.Column('hashed_password', sa.String(), nullable=False),
        sa.Column('first_name', sa.String(length=100), nullable=True),
        sa.Column('last_name', sa.String(length=100), nullable=True),
        sa.Column(
            'role', sa.Enum('OWNER', 'USER', name='userroleenum', native_enum=False), nullable=True
        ),
        sa.Column('team', sa.String(length=100), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('last_login', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_id'), ['id'], unique=False)

    op.create_table(
        'policies',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('service_id', sa.Integer(), nullable=False),
        sa.Column('title', sa.String(), nullable=False),
        sa.Column('number', sa.String(), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column(
            'priority',
            sa.Enum('LOW', 'MID', 'HIGH', 'CRITICAL', name='priorityenum', native_enum=False),
            nullable=True,
        ),
        sa.Column(
            'status',
            sa.Enum(
                'PENDING',
                'REVIEWED',
                'IMPLEMENTED',
                'ACTIONED',
                'LIVE',
                name='compliencestatusenum',
                native_enum=False,
            ),
            nullable=True,
        ),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ['service_id'], ['services.id'], name=op.f('fk_policies_service_id_services')
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_policies')),
    )
    with op.batch_alter_table('policies', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_policies_service_id'), ['service_id'], unique=False)

    op.create_table(
        'reminders',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('title', sa.String(length=255), nullable=False),
        sa.Column('message', sa.Text(), nullable=True),
        sa.Column('reminder_type', sa.String(length=50), nullable=True),
        sa.Column('due_date', sa.DateTime(), nullable=False),
        sa.Column('sent_at', sa.DateTime(), nullable=True),
        sa.Column('read_at', sa.DateTime(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_reminders_user_id_users')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_reminders')),
    )
    with op.batch_alter_table('reminders', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_reminders_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_reminders_user_id'), ['user_id'], unique=False)

    op.create_table(
        'user_invitations',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('email', sa.String(), nullable=False),
        sa.Column(
            'role', sa.Enum('OWNER', 'USER', name='userroleenum', native_enum=False), nullable=True
        ),
        sa.Column('team', sa.String(length=100), nullable=True),
        sa.Column('invited_by', sa.Integer(), nullable=True),
        sa.Column('invited_at', sa.DateTime(), nullable=True),
        sa.Column('token', sa.String(length=255), nullable=False),
        sa.Column('expires_at', sa.DateTime(), nullable=False),
        sa.Column('accepted', sa.Boolean(), nullable=True),
        sa.Column('accepted_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ['invited_by'], ['users.id'], name=op.f('fk_user_invitations_invited_by_users')
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_user_invitations')),
        sa.UniqueConstraint('token', name=op.f('uq_user_invitations_token')),
    )
    with op.batch_alter_table('user_invitations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_invitations_id'), ['id'], unique=False)
        batch_op.create_index(
            batch_op.f('ix_user_invitations_invited_by'), ['invited_by'], unique=False
        )

    op.create_table(
        'policy_acceptances',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('policy_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('accepted_at', sa.DateTime(), nullable=True),
        sa.Column('accepted', sa.Boolean(), nullable=True),
        sa.Column('comments', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ['policy_id'], ['policies.id'], name=op.f('fk_policy_acceptances_policy_id_policies')
        ),
        sa.ForeignKeyConstraint(
            ['user_id'], ['users.id'], name=op.f('fk_policy_acceptances_user_id_users')
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_policy_acceptances')),
    )
    with op.batch_alter_table('policy_acceptances', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_policy_acceptances_id'), ['id'], unique=False)
        batch_op.create_index(
            batch_op.f('ix_policy_acceptances_policy_id'), ['policy_id'], unique=False
        )
        batch_op.create_index(
            batch_op.f('ix_policy_acceptances_user_id'), ['user_id'], unique=False
        )

    op.create_table(
        'procedures',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('policy_id', sa.Integer(), nullable=False),
        sa.Column('title', sa.String(), nullable=False),
        sa.Column('path', sa.String(), nullable=True),
        sa.Column('version', sa.String(), nullable=True),
        sa.Column(
            'priority',
            sa.Enum('LOW', 'MID', 'HIGH', 'CRITICAL', name='priorityenum', native_enum=False),
            nullable=True,
        ),
        sa.Column(
            'status',
            sa.Enum(
                'PENDING',
                'REVIEWED',
                'IMPLEMENTED',
                'ACTIONED',
                'LIVE',
                name='compliencestatusenum',
                native_enum=False,
            ),
            nullable=True,
        ),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ['policy_id'], ['policies.id'], name=op.f('fk_procedures_policy_id_policies')
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_procedures')),
    )
    with op.batch_alter_table('procedures', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_procedures_policy_id'), ['policy_id'], unique=False)

    op.create_table(
        'activity_logs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('procedure_id', sa.Integer(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('performed_by', sa.String(length=100), nullable=True),
        sa.Column('timestamp', sa.DateTime(), nullable=True),
        sa.Column('outcome', sa.String(length=100), nullable=True),
        sa.ForeignKeyConstraint(
            ['procedure_id'],
            ['procedures.id'],
            name=op.f('fk_activity_logs_procedure_id_procedures'),
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_activity_logs')),
    )
    with op.batch_alter_table('activity_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_activity_logs_id'), ['id'], unique=False)
        batch_op.create_index(
            batch_op.f('ix_activity_logs_procedure_id'), ['procedure_id'], unique=False
        )

    op.create_table(
        'checklist_items',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('procedure_id', sa.Integer(), nullable=False),
        sa.Column('description', sa.Text(), nullable=False),
        sa.Column('sort_order', sa.Integer(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ['procedure_id'],
            ['procedures.id'],
            name=op.f('fk_checklist_items_procedure_id_procedures'),
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_checklist_items')),
    )
    with op.batch_alter_table('checklist_items', schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f('ix_checklist_items_procedure_id'), ['procedure_id'], unique=False
        )

    op.create_table(
        'compliance_schedule',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('title', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('due_date', sa.Date(), nullable=False),
        sa.Column('assigned_to', sa.Integer(), nullable=True),
        sa.Column(
            'status',
            sa.Enum(
                'PENDING',
                'IN_PROGRESS',
                'COMPLETED',
                'CANCELLED',
                name='taskstatusenum',
                native_enum=False,
            ),
            nullable=True,
        ),
        sa.Column(
            'priority',
            sa.Enum('LOW', 'MID', 'HIGH', 'CRITICAL', name='priorityenum', native_enum=False),
            nullable=True,
        ),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('completed_at', sa.DateTime(), nullable=True),
        sa.Column('related_policy_id', sa.Integer(), nullable=True),
        sa.Column('related_procedure_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ['assigned_to'], ['users.id'], name=op.f('fk_compliance_schedule_assigned_to_users')
        ),
        sa.ForeignKeyConstraint(
            ['related_policy_id'],
            ['policies.id'],
            name=op.f('fk_compliance_schedule_related_policy_id_policies'),
        ),
        sa.ForeignKeyConstraint(
            ['related_procedure_id'],
            ['procedures.id'],
            name=op.f('fk_compliance_schedule_related_procedure_id_procedures'),
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_compliance_schedule')),
    )
    with op.batch_alter_table('compliance_schedule', schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f('ix_compliance_schedule_assigned_to'), ['assigned_to'], unique=False
        )
        batch_op.create_index(batch_op.f('ix_compliance_schedule_id'), ['id'], unique=False)
        batch_op.create_index(
            batch_op.f('ix_compliance_schedule_related_policy_id'),
            ['related_policy_id'],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f('ix_compliance_schedule_related_procedure_id'),
            ['related_procedure_id'],
            unique=False,
        )

    op.create_table(
        'documents',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('filename', sa.String(length=255), nullable=False),
        sa.Column('original_filename', sa.String(length=255), nullable=False),
        sa.Column('file_path', sa.String(length=500), nullable=False),
        sa.Column('file_size', sa.Integer(), nullable=True),
        sa.Column('mime_type', sa.String(length=100), nullable=True),
        sa.Column('uploaded_by', sa.Integer(), nullable=True),
        sa.Column('uploaded_at', sa.DateTime(), nullable=True),
        sa.Column('policy_id', sa.Integer(), nullable=True),
        sa.Column('procedure_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ['policy_id'], ['policies.id'], name=op.f('fk_documents_policy_id_policies')
        ),
        sa.ForeignKeyConstraint(
            ['procedure_id'], ['procedures.id'], name=op.f('fk_documents_procedure_id_procedures')
        ),
        sa.ForeignKeyConstraint(
            ['uploaded_by'], ['users.id'], name=op.f('fk_documents_uploaded_by_users')
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_documents')),
    )
    with op.batch_alter_table('documents', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_documents_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_documents_policy_id'), ['policy_id'], unique=False)
        batch_op.create_index(
            batch_op.f('ix_documents_procedure_id'), ['procedure_id'], unique=False
        )
        batch_op.create_index(batch_op.f('ix_documents_uploaded_by'), ['uploaded_by'], unique=False)

    op.create_table(
        'procedure_acceptances',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('procedure_id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('accepted_at', sa.DateTime(), nullable=True),
        sa.Column('accepted', sa.Boolean(), nullable=True),
        sa.Column('comments', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ['procedure_id'],
            ['procedures.id'],
            name=op.f('fk_procedure_acceptances_procedure_id_procedures'),
        ),
        sa.ForeignKeyConstraint(
            ['user_id'], ['users.id'], name=op.f('fk_procedure_acceptances_user_id_users')
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_procedure_acceptances')),
    )
    with op.batch_alter_table('procedure_acceptances', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_procedure_acceptances_id'), ['id'], unique=False)
        batch_op.create_index(
            batch_op.f('ix_procedure_acceptances_procedure_id'), ['procedure_id'], unique=False
        )
        batch_op.create_index(
            batch_op.f('ix_procedure_acceptances_user_id'), ['user_id'], unique=False
        )

    op.create_table(
        'risks',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('date_raised', sa.Date(), nullable=True),
        sa.Column('raised_by', sa.String(), nullable=True),
        sa.Column('risk_category', sa.String(), nullable=True),
        sa.Column('event', sa.Text(), nullable=True),
        sa.Column('cause', sa.Text(), nullable=True),
        sa.Column('consequence', sa.Text(), nullable=True),
        sa.Column('likelihood', sa.String(), nullable=True),
        sa.Column('consequence_rating', sa.String(), nullable=True),
        sa.Column('risk_rating', sa.String(), nullable=True),
        sa.Column('action', sa.Text(), nullable=True),
        sa.Column('plan', sa.Text(), nullable=True),
        sa.Column('risk_owner', sa.String(), nullable=True),
        sa.Column('resolve_by', sa.Date(), nullable=True),
        sa.Column('method', sa.Text(), nullable=True),
        sa.Column('progress_compliance_reporting', sa.Text(), nullable=True),
        sa.Column('status', sa.String(), nullable=True),
        sa.Column('email_subject', sa.String(), nullable=True),
        sa.Column('email_body', sa.Text(), nullable=True),
        sa.Column('related_policy_id', sa.Integer(), nullable=True),
        sa.Column('related_procedure_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ['related_policy_id'], ['policies.id'], name=op.f('fk_risks_related_policy_id_policies')
        ),
        sa.ForeignKeyConstraint(
            ['related_procedure_id'],
            ['procedures.id'],
            name=op.f('fk_risks_related_procedure_id_procedures'),
        ),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_risks')),
    )
    with op.batch_alter_table('risks', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_risks_id'), ['id'], unique=False)
        batch_op.create_index(
            batch_op.f('ix_risks_related_policy_id'), ['related_policy_id'], unique=False
        )
        batch_op.create_index(
            batch_op.f('ix_risks_related_procedure_id'), ['related_procedure_id'], unique=False
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('risks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_risks_related_procedure_id'))
        batch_op.drop_index(batch_op.f('ix_risks_related_policy_id'))
        batch_op.drop_index(batch_op.f('ix_risks_id'))

    op.drop_table('risks')
    with op.batch_alter_table('procedure_acceptances', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_procedure_acceptances_user_id'))
        batch_op.drop_index(batch_op.f('ix_procedure_acceptances_procedure_id'))
        batch_op.drop_index(batch_op.f('ix_procedure_acceptances_id'))

    op.drop_table('procedure_acceptances')
    with op.batch_alter_table('documents', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_documents_uploaded_by'))
        batch_op.drop_index(batch_op.f('ix_documents_procedure_id'))
        batch_op.drop_index(batch_op.f('ix_documents_policy_id'))
        batch_op.drop_index(batch_op.f('ix_documents_id'))

    op.drop_table('documents')
    with op.batch_alter_table('compliance_schedule', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_compliance_schedule_related_procedure_id'))
        batch_op.drop_index(batch_op.f('ix_compliance_schedule_related_policy_id'))
        batch_op.drop_index(batch_op.f('ix_compliance_schedule_id'))
        batch_op.drop_index(batch_op.f('ix_compliance_schedule_assigned_to'))

    op.drop_table('compliance_schedule')
    with op.batch_alter_table('checklist_items', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_checklist_items_procedure_id'))

    op.drop_table('checklist_items')
    with op.batch_alter_table('activity_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_activity_logs_procedure_id'))
        batch_op.drop_index(batch_op.f('ix_activity_logs_id'))

    op.drop_table('activity_logs')
    with op.batch_alter_table('procedures', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_procedures_policy_id'))

    op.drop_table('procedures')
    with op.batch_alter_table('policy_acceptances', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_policy_acceptances_user_id'))
        batch_op.drop_index(batch_op.f('ix_policy_acceptances_policy_id'))
        batch_op.drop_index(batch_op.f('ix_policy_acceptances_id'))

    op.drop_table('policy_acceptances')
    with op.batch_alter_table('user_invitations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_invitations_invited_by'))
        batch_op.drop_index(batch_op.f('ix_user_invitations_id'))

    op.drop_table('user_invitations')
    with op.batch_alter_table('reminders', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_reminders_user_id'))
        batch_op.drop_index(batch_op.f('ix_reminders_id'))

    op.drop_table('reminders')
    with op.batch_alter_table('policies', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_policies_service_id'))

    op.drop_table('policies')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_id'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    op.drop_table('services')
    # ### end Alembic commands ###
